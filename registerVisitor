//#################### REGISTERVISITOR.JS ########################
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js";
import { getFirestore, collection, doc, setDoc, addDoc, getDoc  } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore.js";
import { getAuth, createUserWithEmailAndPassword, sendEmailVerification } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-auth.js";


document.addEventListener('DOMContentLoaded', () => {
    const firebaseConfig = {
        apiKey: "AIzaSyBDp03_t7kWck8XTT9iqv3SIX8UqFp_C6w",
        authDomain: "bims-9aaa7.firebaseapp.com",
        projectId: "bims-9aaa7",
        storageBucket: "bims-9aaa7.appspot.com",
        messagingSenderId: "323333588672",
        appId: "1:323333588672:web:cfb7ea2dff4d9eb2004f25",
        measurementId: "G-RQJBMNMFQ8"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth();
    const db = getFirestore(app);


    const infoForm = document.getElementById('personal-info-form');
    const submitBtn = document.getElementById('sign-up');
    const agreementCheckbox = document.getElementById('agreement');

    // Function to check form validity and enable/disable submit button
    const updateSubmitButton = () => {
        if (infoForm.checkValidity() && agreementCheckbox.checked) {
            submitBtn.disabled = false;
            submitBtn.classList.remove('inactive-submit');
        } else {
            submitBtn.disabled = true;
            submitBtn.classList.add('inactive-submit');
        }
    };

    // Event listeners for input fields and checkbox
    infoForm.addEventListener('input', updateSubmitButton);
    agreementCheckbox.addEventListener('change', updateSubmitButton);

    const handleSubmit = async (event) => {
      event.preventDefault();
  
      const formData = new FormData(infoForm);
      const data = {
        username: formData.get('username').toUpperCase(),
        password: formData.get('password'),
        firstName: formData.get('fname').toUpperCase(),
        middleName: formData.get('mname').toUpperCase() || '',
        lastName: formData.get('lname').toUpperCase(),
        suffix: formData.get('suffix').toUpperCase() || '',
        email: formData.get('email'),
        phone: formData.get('phone').toUpperCase() || '',
        birthdate: formData.get('birthdate'),
        birthplace: formData.get('birthplace').toUpperCase() || '',
        citizenship: formData.get('citizenship').toUpperCase(),
        gender: formData.get('gender').toUpperCase(),
        voter: formData.get('voter').toUpperCase(),
        maritalStatus: formData.get('marital-status').toUpperCase(),
        employmentStatus: formData.get('employment-status').toUpperCase(),
        occupation: formData.get('occupation').toUpperCase() || '',
        blklot: formData.get('blklot').toUpperCase(),
        street: formData.get('street').toUpperCase() || ''
      };
  
      try {
        const originalPassword = data.password;
  
        const key = CryptoJS.enc.Utf8.parse('1234567890123456');
        const encryptedPassword = CryptoJS.AES.encrypt(originalPassword, key, {
          mode: CryptoJS.mode.ECB
        }).toString();
  
        data.password = encryptedPassword;
  
        const userCredentials = await createUserWithEmailAndPassword(auth, data.email, originalPassword);
        const userId = userCredentials.user.uid;
  
        await sendEmailVerification(auth.currentUser);
        alert("Email Verification Sent! Please verify your email to complete registration.");
  
        auth.onAuthStateChanged(async (user) => {
          if (user && user.emailVerified) {
            console.log("User is authenticated and email is verified");
  
            const customId = await generateCustomId();
            data.uniqueId = customId;
  
            try {
              await setDoc(doc(db, 'User_Accounts', userId), {
                username: data.username,
                firstName: data.firstName,
                lastName: data.lastName,
                email: data.email,
                phone: data.phone,
                birthdate: data.birthdate,
                password: data.password
              });
              console.log("User data stored in User_Accounts collection");
            } catch (error) {
              console.error("Error storing user data in User_Accounts:", error);
            }
  
            try {
              await setDoc(doc(db, 'users', userId), {
                username: data.username,
                firstName: data.firstName,
                middleName: data.middleName,
                lastName: data.lastName,
                suffix: data.suffix,
                email: data.email,
                phone: data.phone,
                birthdate: data.birthdate,
                birthplace: data.birthplace,
                citizenship: data.citizenship,
                gender: data.gender,
                voter: data.voter,
                maritalStatus: data.maritalStatus,
                employmentStatus: data.employmentStatus,
                occupation: data.occupation,
                blklot: data.blklot,
                street: data.street
              });
              console.log("User data stored in users collection");
            } catch (error) {
              console.error("Error storing user data in users collection:", error);
            }
  
            infoForm.reset();
            showPopup(data, originalPassword);
  
            submitBtn.disabled = true;
            submitBtn.classList.add('inactive-submit');
          }
        });
      } catch (error) {
        console.error("Error: ", error);
        alert(error.message);
      }
    };
  
    async function generateCustomId() {
      const counterDoc = await getDoc(doc(db, 'counters', 'userCounter'));
      let counter;
  
      if (counterDoc.exists()) {
        counter = counterDoc.data().count;
        await setDoc(doc(db, 'counters', 'userCounter'), { count: counter + 1 });
      } else {
        counter = 1;
        await setDoc(doc(db, 'counters', 'userCounter'), { count: counter });
      }
  
      const paddedCounter = String(counter).padStart(6, '0');
      return `SAPDI-${paddedCounter}`;
    }

      

      const showPopup = (data, originalPassword) => {
        const popup = document.getElementById('popup');
        const popupContent = document.getElementById('popupContent');
    
        if (popupContent) {
            popupContent.innerHTML = generatePopupContent(data, originalPassword);
            popup.classList.add('active');
    
            const closePopupButton = document.getElementById('closePopup');
            if (closePopupButton) {
                closePopupButton.addEventListener('click', () => {
                    popup.classList.remove('active');
                    window.location.href = '/loginPage.html';
                });
            }
    
            const togglePasswordButton = document.getElementById('togglePassword');
            const passwordDisplay = document.getElementById('passwordDisplay');
            if (togglePasswordButton && passwordDisplay) {
                togglePasswordButton.addEventListener('click', () => {
                    // Toggle visibility logic
                    const currentType = passwordDisplay.getAttribute('data-type');
                    if (currentType === 'password') {
                        passwordDisplay.setAttribute('data-type', 'text');
                        passwordDisplay.innerText = originalPassword; // Show original password
                    } else {
                        passwordDisplay.setAttribute('data-type', 'password');
                        passwordDisplay.innerText = '*'.repeat(originalPassword.length); // Show masked password
                    }
                });
            } else {
                console.error("Toggle password button or password display element not found.");
            }
        } else {
            console.error("Popup elements not found in the DOM.");
        }
    };
    

    const generatePopupContent = (data, originalPassword) => `
    <p><strong style="color: #585858;">Username:&nbsp;</strong> ${data.username}</p>
    <p><strong style="color: #e1e1e1;">Password:&nbsp;</strong>
        <span id="passwordDisplay" data-type="password">${'*'.repeat(originalPassword.length)}</span>
        <span class="eye-icon" id="togglePassword">
            <img id="eye" src="/icons/eye_slash_icon_white.jpg" alt="Show password" />
            <img id="eye-slash" src="/icons/eye_icon_white.jpg" alt="Hide password" style="display: none;" />
        </span>
    </p>
    <p><strong style="color: #e1e1e1;">First Name:&nbsp;</strong> ${data.firstName}</p>
    <p><strong style="color: #e1e1e1;">Last Name:&nbsp;</strong> ${data.lastName}</p>
    <p><strong style="color: #e1e1e1;">Email:&nbsp;</strong> ${data.email}</p>
    <p><strong style="color: #e1e1e1;">Phone:&nbsp;</strong> ${data.phone}</p>
    <p><strong style="color: #e1e1e1;">Birthdate:&nbsp;</strong> ${data.birthdate}</p>
`;

infoForm.addEventListener('submit', handleSubmit);

});

